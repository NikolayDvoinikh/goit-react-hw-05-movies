{"version":3,"file":"static/js/450.0c4abdb4.chunk.js","mappings":"kOAgDA,UA3CoB,WAClB,OAA8BA,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,wGAEjBR,GAAW,GAFM,UAISS,EAAAA,EAAAA,IAAgBJ,GAJzB,gBAITK,EAJS,EAITA,QACRN,GAAS,OAAIM,IALI,gDAMRC,EANQ,KAMRA,SACTT,EAASS,EAASC,KAAKC,SAPN,yBASjBb,GAAW,GATM,4EAAH,qDAYlBQ,GACD,GAAE,CAACH,IAEJ,IAAMS,EAAWX,EAAMY,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,QACxC,OACE,2BACE,qCAAaF,MACb,uBAAIE,MAFGD,EAKZ,IACD,OACE,2BACGlB,IAAW,2CACXE,IAAS,uBAAIA,IACbE,EAAMgB,OAAS,GACd,wBAAKL,KAEL,sEAIP,C,sLC1CKM,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QALQ,sCASCC,EAAc,mCAAG,sGACLL,EAASM,IAAI,uBADR,uBACpBd,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKde,EAAc,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACLT,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNK,MAAAA,EACAC,KAAAA,KAJwB,uBACpBjB,EADoB,EACpBA,KADoB,kBAOrBA,GAPqB,2CAAH,sDAUdkB,EAAgB,mCAAG,WAAMb,GAAN,yFACPG,EAASM,IAAT,iBAAuBT,IADhB,uBACtBL,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,sDAKhBmB,EAAkB,mCAAG,WAAMd,GAAN,yFACTG,EAASM,IAAT,iBAAuBT,EAAvB,aADS,uBACxBL,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,sDAKlBH,EAAe,mCAAG,WAAMQ,GAAN,yFACNG,EAASM,IAAT,iBAAuBT,EAAvB,aADM,uBACrBL,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qD","sources":["components/pages/ReviewsPage/ReviewsPage.jsx","shared/services/Api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieReviews } from 'shared/services/Api';\n\nconst ReviewsPage = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [items, setItems] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setLoading(true);\n\n        const { results } = await getMovieReviews(movieId);\n        setItems([...results]);\n      } catch ({ response }) {\n        setError(response.data.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  const elements = items.map(({ author, id, content }) => {\n    return (\n      <li key={id}>\n        <h4>Author: {author}</h4>\n        <p>{content}</p>\n      </li>\n    );\n  });\n  return (\n    <div>\n      {loading && <p>Loading reviews</p>}\n      {error && <p>{error}</p>}\n      {items.length > 0 ? (\n        <ul>{elements}</ul>\n      ) : (\n        <p>We don`t have any reviews for this movie</p>\n      )}\n    </div>\n  );\n};\n\nexport default ReviewsPage;\n","import axios from 'axios';\n\nconst KEY = '9b564f816e5c77cf73acce6dc1fdd0cf';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: KEY,\n  },\n});\n\nexport const getTrendMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const getSearchFilms = async (query, page = 1) => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getFullMovieInfo = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieActorsInfo = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n"],"names":["useState","loading","setLoading","error","setError","items","setItems","movieId","useParams","useEffect","fetchReviews","getMovieReviews","results","response","data","message","elements","map","author","id","content","length","instance","axios","baseURL","params","api_key","getTrendMovies","get","getSearchFilms","query","page","getFullMovieInfo","getMovieActorsInfo"],"sourceRoot":""}