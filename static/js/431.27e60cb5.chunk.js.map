{"version":3,"file":"static/js/431.27e60cb5.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/shared/MovieCard/movie-card.module.css?cdcd","shared/MovieCard/MovieCard.jsx","webpack://react-homework-template/./src/components/pages/MovieDetailsPage/movie-details-page.module.css?8c21","components/pages/MovieDetailsPage/MovieDetailsPage.jsx","shared/services/Api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"movie-card_container__TAJk3\",\"wrapper\":\"movie-card_wrapper__cPsxk\",\"info\":\"movie-card_info__sxn7C\"};","import styles from './movie-card.module.css';\nimport PropTypes from 'prop-types';\n\nconst MovieCard = ({ url, rate, overview, genres, title, releaseDate }) => {\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper}>\n        <div>\n          <img\n            src={`https://image.tmdb.org/t/p/w400${url}`}\n            alt=\"Movie poster\"\n          />\n        </div>\n        <div className={styles.info}>\n          {releaseDate ? (\n            <h2>{`${title} (${releaseDate.slice(0, 4)})`}</h2>\n          ) : (\n            <h2>{title}</h2>\n          )}\n          {rate && <p>{`User Score: ${Math.round(rate * 10).toFixed(0)} %`}</p>}\n          <h3>Overview</h3>\n          {overview ? (\n            <p>{overview}</p>\n          ) : (\n            <p>We don't have any review for this movie</p>\n          )}\n          <h3>Genres</h3>\n          {genres && <p>{genres}</p>}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  url: PropTypes.string.isRequired,\n  rate: PropTypes.number,\n  overview: PropTypes.string,\n  genres: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  releaseDate: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"go_back\":\"movie-details-page_go_back__UWA02\",\"movie_page\":\"movie-details-page_movie_page__8jepT\"};","import { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { useEffect, useState, Suspense } from 'react';\nimport { getFullMovieInfo } from '../../../shared/services/Api';\nimport PropTypes from 'prop-types';\n\nimport MovieCard from 'shared/MovieCard/MovieCard';\n\nimport styles from './movie-details-page.module.css';\n\nconst MovieDetailsPage = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [title, setTitle] = useState('');\n  const [rate, setRate] = useState(0);\n  const [genres, setGenres] = useState('');\n  const [url, setUrl] = useState('');\n  const [overview, setOverview] = useState('');\n  const [releaseDate, setReleaseDate] = useState('');\n\n  console.log(typeof genres);\n\n  const { movieId } = useParams();\n  const { state } = useLocation();\n  const goBack = state?.from ?? '/';\n\n  useEffect(() => {\n    const fetchInfoMovie = async () => {\n      try {\n        setLoading(true);\n\n        const resp = await getFullMovieInfo(movieId);\n        const {\n          poster_path,\n          overview,\n          genres,\n          original_title,\n          vote_average,\n          release_date,\n        } = resp;\n\n        const genresValue = genres?.map(({ name }) => name).join(', ');\n\n        setUrl(poster_path);\n        setOverview(overview);\n        setTitle(original_title);\n        setReleaseDate(release_date);\n        setRate(vote_average);\n        setGenres(genresValue);\n      } catch ({ response }) {\n        setError(response.data.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInfoMovie();\n  }, [movieId]);\n\n  return (\n    <div className={styles.movie_page}>\n      <Link to={goBack} className={styles.go_back}>\n        <span>&#8656; Go Back</span>\n      </Link>\n      {error && <p>{error}</p>}\n      {loading ? (\n        <p>Loading Info</p>\n      ) : (\n        <div>\n          <MovieCard\n            title={title}\n            releaseDate={releaseDate}\n            rate={rate}\n            genres={genres}\n            overview={overview}\n            url={url}\n          />\n          <p className={styles.additional}>Additional Information</p>\n          <ul>\n            <Link to=\"cast\" state={{ from: goBack }}>\n              <li>\n                <p>Cast</p>\n              </li>\n            </Link>\n            <Link to=\"reviews\" state={{ from: goBack }}>\n              <li>\n                <p>Reviews</p>\n              </li>\n            </Link>\n          </ul>\n          <Suspense>\n            <Outlet />\n          </Suspense>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default MovieDetailsPage;\n\nMovieDetailsPage.propTypes = {\n  resp: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string,\n      overview: PropTypes.string,\n      genres: PropTypes.string,\n      original_title: PropTypes.string,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.string,\n    })\n  ),\n};\n","import axios from 'axios';\n\nconst KEY = '9b564f816e5c77cf73acce6dc1fdd0cf';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: KEY,\n  },\n});\n\nexport const getTrendMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const getSearchFilms = async (query, page = 1) => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getFullMovieInfo = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieActorsInfo = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n"],"names":["url","rate","overview","genres","title","releaseDate","className","styles","src","alt","slice","Math","round","toFixed","useState","loading","setLoading","error","setError","setTitle","setRate","setGenres","setUrl","setOverview","setReleaseDate","console","log","movieId","useParams","state","useLocation","goBack","from","useEffect","fetchInfoMovie","getFullMovieInfo","resp","poster_path","original_title","vote_average","release_date","genresValue","map","name","join","response","data","message","to","Suspense","instance","axios","baseURL","params","api_key","getTrendMovies","get","getSearchFilms","query","page","id","getMovieActorsInfo","getMovieReviews"],"sourceRoot":""}